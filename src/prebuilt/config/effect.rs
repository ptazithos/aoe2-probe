use lazy_static::lazy_static;

pub struct EffectConfig {
    pub name: &'static str,
    pub attrs: Vec<&'static str>,
}

impl EffectConfig {
    fn new(name: &'static str, attrs: Vec<&'static str>) -> Self {
        EffectConfig { name, attrs }
    }
}

lazy_static! {
    pub static ref EFFECT_SCHEME: Vec<EffectConfig> = {
        let mut mapping = Vec::new();
        mapping.push(EffectConfig::new("None", vec![]));
        mapping.push(EffectConfig::new(
            "CHANGE_DIPLOMACY",
            vec!["diplomacy", "source_player", "target_player"],
        ));
        mapping.push(EffectConfig::new(
            "RESEARCH_TECHNOLOGY",
            vec!["source_player", "technology", "force_research_technology"],
        ));
        mapping.push(EffectConfig::new(
            "SEND_CHAT",
            vec!["source_player", "string_id", "message", "sound_name"],
        ));
        mapping.push(EffectConfig::new(
            "PLAY_SOUND",
            vec![
                "source_player",
                "location_x",
                "location_y",
                "location_object_reference",
                "sound_name",
            ],
        ));
        mapping.push(EffectConfig::new(
            "TRIBUTE",
            vec!["quantity", "tribute_list", "source_player", "target_player"],
        ));
        mapping.push(EffectConfig::new(
            "UNLOCK_GATE",
            vec!["selected_object_ids"],
        ));
        mapping.push(EffectConfig::new("LOCK_GATE", vec!["selected_object_ids"]));
        mapping.push(EffectConfig::new("ACTIVATE_TRIGGER", vec!["trigger_id"]));
        mapping.push(EffectConfig::new("DEACTIVATE_TRIGGER", vec!["trigger_id"]));
        mapping.push(EffectConfig::new("AI_SCRIPT_GOAL", vec!["ai_script_goal"]));
        mapping.push(EffectConfig::new(
            "CREATE_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "facet",
            ],
        ));
        mapping.push(EffectConfig::new(
            "TASK_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "location_object_reference",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "action_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "DECLARE_VICTORY",
            vec!["source_player", "enabled"],
        ));
        mapping.push(EffectConfig::new(
            "KILL_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "REMOVE_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "object_state",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_VIEW",
            vec!["source_player", "location_x", "location_y", "scroll"],
        ));
        mapping.push(EffectConfig::new(
            "UNLOAD",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "location_object_reference",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OWNERSHIP",
            vec![
                "object_list_unit_id",
                "source_player",
                "target_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "flash_object",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "PATROL",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "location_object_reference",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "DISPLAY_INSTRUCTIONS",
            vec![
                "object_list_unit_id",
                "source_player",
                "string_id",
                "display_time",
                "instruction_panel_position",
                "play_sound",
                "message",
                "sound_name",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CLEAR_INSTRUCTIONS",
            vec!["instruction_panel_position"],
        ));
        mapping.push(EffectConfig::new(
            "FREEZE_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new("USE_ADVANCED_BUTTONS", vec![]));
        mapping.push(EffectConfig::new(
            "DAMAGE_OBJECT",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "PLACE_FOUNDATION",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_NAME",
            vec![
                "object_list_unit_id",
                "source_player",
                "string_id",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "message",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_HP",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "operation",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_ATTACK",
            vec![
                "armour_attack_quantity",
                "armour_attack_class",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "operation",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "STOP_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "ATTACK_MOVE",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "location_object_reference",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_ARMOR",
            vec![
                "armour_attack_quantity",
                "armour_attack_class",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "operation",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_RANGE",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "operation",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_SPEED",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "HEAL_OBJECT",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "TELEPORT_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_STANCE",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_y2",
                "object_group",
                "object_type",
                "attack_stance",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "DISPLAY_TIMER",
            vec![
                "string_id",
                "display_time",
                "time_unit",
                "timer",
                "reset_timer",
                "message",
            ],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_DISABLE_OBJECT",
            vec!["object_list_unit_id", "source_player", "enabled"],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_DISABLE_TECHNOLOGY",
            vec!["source_player", "technology", "enabled"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_COST",
            vec![
                "object_list_unit_id",
                "source_player",
                "food",
                "wood",
                "stone",
                "gold",
            ],
        ));
        mapping.push(EffectConfig::new(
            "SET_PLAYER_VISIBILITY",
            vec!["source_player", "target_player", "visibility_state"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_ICON",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "object_list_unit_id_2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "REPLACE_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "target_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_group",
                "object_type",
                "object_list_unit_id_2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_DESCRIPTION",
            vec![
                "object_list_unit_id",
                "source_player",
                "string_id",
                "message",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_PLAYER_NAME",
            vec!["source_player", "string_id", "message"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_TRAIN_LOCATION",
            vec![
                "object_list_unit_id",
                "source_player",
                "object_list_unit_id_2",
                "button_location",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_RESEARCH_LOCATION",
            vec![
                "source_player",
                "technology",
                "object_list_unit_id_2",
                "button_location",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_CIVILIZATION_NAME",
            vec!["source_player", "string_id", "message"],
        ));
        mapping.push(EffectConfig::new(
            "CREATE_GARRISONED_OBJECT",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "object_list_unit_id_2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "ACKNOWLEDGE_AI_SIGNAL",
            vec!["ai_signal_value"],
        ));
        mapping.push(EffectConfig::new(
            "MODIFY_ATTRIBUTE",
            vec![
                "quantity",
                "object_list_unit_id",
                "source_player",
                "operation",
                "object_attributes",
                "message",
            ],
        ));
        mapping.push(EffectConfig::new(
            "MODIFY_RESOURCE",
            vec!["quantity", "tribute_list", "source_player", "operation"],
        ));
        mapping.push(EffectConfig::new(
            "MODIFY_RESOURCE_BY_VARIABLE",
            vec!["tribute_list", "source_player", "operation", "variable"],
        ));
        mapping.push(EffectConfig::new(
            "SET_BUILDING_GATHER_POINT",
            vec![
                "object_list_unit_id",
                "source_player",
                "location_x",
                "location_y",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "SCRIPT_CALL",
            vec!["string_id", "message"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_VARIABLE",
            vec!["quantity", "operation", "variable", "message"],
        ));
        mapping.push(EffectConfig::new("CLEAR_TIMER", vec!["timer"]));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_PLAYER_COLOR",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "player_color",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_CIVILIZATION_NAME",
            vec![
                "string_id",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_OBJECT_PLAYER_NAME",
            vec![
                "object_list_unit_id",
                "source_player",
                "string_id",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "DISABLE_UNIT_TARGETING",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_UNIT_TARGETING",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_TECHNOLOGY_COST",
            vec![
                "source_player",
                "technology",
                "food",
                "wood",
                "stone",
                "gold",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_TECHNOLOGY_RESEARCH_TIME",
            vec!["quantity", "source_player", "technology"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_TECHNOLOGY_NAME",
            vec!["source_player", "technology", "string_id", "message"],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_TECHNOLOGY_DESCRIPTION",
            vec!["source_player", "technology", "string_id", "message"],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_TECHNOLOGY_STACKING",
            vec!["source_player", "technology"],
        ));
        mapping.push(EffectConfig::new(
            "DISABLE_TECHNOLOGY_STACKING",
            vec!["source_player", "technology"],
        ));
        mapping.push(EffectConfig::new(
            "ACKNOWLEDGE_MULTIPLAYER_AI_SIGNAL",
            vec!["ai_signal_value"],
        ));
        mapping.push(EffectConfig::new(
            "DISABLE_OBJECT_SELECTION",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_OBJECT_SELECTION",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "CHANGE_COLOR_MOOD",
            vec!["quantity", "color_mood"],
        ));
        mapping.push(EffectConfig::new(
            "ENABLE_OBJECT_DELETION",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "item_id",
                "selected_object_ids",
            ],
        ));
        mapping.push(EffectConfig::new(
            "DISABLE_OBJECT_DELETION",
            vec![
                "object_list_unit_id",
                "source_player",
                "area_x1",
                "area_y1",
                "area_x2",
                "area_y2",
                "item_id",
                "selected_object_ids",
            ],
        ));

        mapping
    };
}
